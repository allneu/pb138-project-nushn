// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  userName       String        @unique
  email          String        @unique
  hashedPassword String
  salt           String
  createdAt      DateTime      @default(now())
  editedAt       DateTime?
  deletedAt      DateTime?
  avatar         String
  roles          Role[]
  subPageEdits   SubPageEdit[]
  labelEdits     LabelEdit[]
  taskEdits      TaskEdit[]
  tasks          Task[]
}

model Role {
  id       String    @id @default(uuid())
  roleType RoleType
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  subpages SubPage[]
}

model SubPage {
  id           String        @id @default(uuid())
  name         String
  description  String
  icon         String
  createdAt    DateTime      @default(now())
  deletedAt    DateTime?
  creator      Role          @relation(fields: [creatorId], references: [id])
  creatorId    String
  labels       Label[]
  subPageEdits SubPageEdit[]
}

model SubPageEdit {
  id              String   @id @default(uuid())
  editor          User     @relation(fields: [editorId], references: [id])
  editorId        String
  editedAt        DateTime
  originalContent String
  subPage         SubPage  @relation(fields: [subPageId], references: [id])
  subPageId       String
}

model Label {
  id               String      @id @default(uuid())
  name             String
  order_in_subpage Int
  createdAt        DateTime    @default(now())
  deletedAt        DateTime?
  subPageId        String
  subPage          SubPage     @relation(fields: [subPageId], references: [id])
  tasks            Task[]
  labelEdits       LabelEdit[]
}

model LabelEdit {
  id              String   @id @default(uuid())
  editor          User     @relation(fields: [editorId], references: [id])
  editorId        String
  editedAt        DateTime
  originalContent String
  label           Label    @relation(fields: [labelId], references: [id])
  labelId         String
}

model Task {
  id             String     @id @default(uuid())
  taskName       String
  status         Boolean
  dueDate        DateTime
  order_in_list  Int
  order_in_label Int
  content        String
  createdAt      DateTime
  deletedAt      DateTime?
  creatorId      String
  creator        User       @relation(fields: [creatorId], references: [id])
  label          Label?     @relation(fields: [labelId], references: [id])
  labelId        String?
  taskEdits      TaskEdit[]
}

model TaskEdit {
  id              String   @id @default(uuid())
  editor          User     @relation(fields: [editorId], references: [id])
  editorId        String
  editedAt        DateTime
  originalContent String
  Task            Task?    @relation(fields: [taskId], references: [id])
  taskId          String?
}

enum RoleType {
  USER
  ADMIN
}
