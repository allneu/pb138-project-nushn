// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  username       String        @unique
  email          String        @unique
  hashedPassword String
  createdAt      DateTime      @default(now())
  editedAt       DateTime?
  deletedAt      DateTime?
  avatar         String
  roles          Role[]
  subPageEdits   SubPageEdit[]
  tasks          Task[]
}

model Role {
  id        String   @id @default(uuid())
  roleType  RoleType
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  subpage   SubPage  @relation(fields: [subpageId], references: [id])
  subpageId String
  deletedAt DateTime?
}

model SubPage {
  id           String        @id @default(uuid())
  name         String
  description  String
  icon         String
  createdAt    DateTime      @default(now())
  deletedAt    DateTime?
  labels       Label[]
  subPageEdits SubPageEdit[]
  roles        Role[]
}

model SubPageEdit {
  id        String   @id @default(uuid())
  editor    User     @relation(fields: [editorId], references: [id])
  editorId  String
  editedAt  DateTime
  subPage   SubPage  @relation(fields: [subpageId], references: [id])
  subpageId String
}

model Label {
  id             String    @id @default(uuid())
  name           String
  orderInSubpage Int?      
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  subPageId      String
  subPage        SubPage   @relation(fields: [subPageId], references: [id])
  tasks          Task[]
}

model Task {
  id           String    @id @default(uuid())
  taskName     String
  done         Boolean   @default(false)
  dueDate      String
  orderInList  Int?      
  orderInLabel Int?      
  content      String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  creatorId    String
  creator      User      @relation(fields: [creatorId], references: [id])
  label        Label     @relation(fields: [labelId], references: [id])
  labelId      String
  image        String?
}

enum RoleType {
  OWNER
  EDITOR
}
